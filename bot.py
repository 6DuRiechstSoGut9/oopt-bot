import os
import logging
import threading
import telebot
from flask import Flask
from waitress import serve
from dotenv import load_dotenv
import requests
import PyPDF2
import docx

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

app = Flask(__name__)
app.route('/')(lambda: "ü§ñ –ë–æ—Ç –û–û–ü–¢ —Ä–∞–±–æ—Ç–∞–µ—Ç!")

TOKEN = os.getenv('TELEGRAM_TOKEN')
DEEPSEEK_API_KEY = os.getenv('DEEPSEEK_API_KEY')

if not TOKEN:
    logger.error("‚ùå TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
if not DEEPSEEK_API_KEY:
    logger.warning("‚ö†Ô∏è DEEPSEEK_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

bot = telebot.TeleBot(TOKEN)

class SimpleDocumentSearch:
    def __init__(self):
        self.documents = []
        self.loaded = False
        
    def extract_text_from_file(self, file_path):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Ñ–∞–π–ª–æ–≤"""
        text = ""
        try:
            if file_path.endswith('.pdf'):
                with open(file_path, 'rb') as file:
                    reader = PyPDF2.PdfReader(file)
                    for page in reader.pages:
                        page_text = page.extract_text()
                        if page_text:
                            text += page_text + "\n"
            elif file_path.endswith('.docx'):
                doc = docx.Document(file_path)
                for paragraph in doc.paragraphs:
                    if paragraph.text:
                        text += paragraph.text + "\n"
            elif file_path.endswith('.txt'):
                with open(file_path, 'r', encoding='utf-8') as file:
                    text = file.read()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
        return text
    
    def load_documents(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã"""
        documents_dir = 'documents'
        if not os.path.exists(documents_dir):
            logger.warning(f"‚ùå –ü–∞–ø–∫–∞ {documents_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            os.makedirs(documents_dir, exist_ok=True)
            logger.info(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ {documents_dir}")
            return
        
        self.documents = []
        file_count = 0
        
        for root, dirs, files in os.walk(documents_dir):
            for file in files:
                if file.endswith(('.pdf', '.docx', '.txt')):
                    file_path = os.path.join(root, file)
                    logger.info(f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª: {file}")
                    
                    text = self.extract_text_from_file(file_path)
                    if text and len(text.strip()) > 10:
                        self.documents.append({
                            'file': file,
                            'text': text,
                            'size': len(text)
                        })
                        file_count += 1
        
        self.loaded = True
        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {file_count}")
        
        # –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π
        if file_count == 0:
            self.create_sample_document()
    
    def create_sample_document(self):
        """–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –µ—Å–ª–∏ –Ω–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        sample_text = """–û–û–ü–¢ –í–æ–ª–æ–≥–æ–¥—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏

–ó–∞–∫–∞–∑–Ω–∏–∫–∏:
1. –í—ã—Ç–µ–≥–æ—Ä—Å–∫–∏–π —Ä–∞–π–æ–Ω - –í–µ—Ä—Ö–Ω–µ-–ê–Ω–¥–æ–º—Å–∫–∏–π (4014 –≥–∞)
2. –ï–∂–æ–∑–µ—Ä—Å–∫–∏–π (3013 –≥–∞)
3. –®–∏–º–æ–∑–µ—Ä—Å–∫–∏–π (8553 –≥–∞)

–ü–∞–º—è—Ç–Ω–∏–∫–∏ –ø—Ä–∏—Ä–æ–¥—ã:
- –ì–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø–∞–º—è—Ç–Ω–∏–∫–∏ –≤ –ë–∞–±—É—à–∫–∏–Ω—Å–∫–æ–º —Ä–∞–π–æ–Ω–µ
- –ë–æ—Ç–∞–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞–º—è—Ç–Ω–∏–∫–∏ –≤ –í–µ–ª–∏–∫–æ—É—Å—Ç—é–≥—Å–∫–æ–º —Ä–∞–π–æ–Ω–µ

–í—Å–µ–≥–æ –≤ –æ–±–ª–∞—Å—Ç–∏ –±–æ–ª–µ–µ 100 –û–û–ü–¢ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è."""
        
        sample_path = 'documents/–æ–±—Ä–∞–∑–µ—Ü_–æ–æ–ø—Ç.txt'
        with open(sample_path, 'w', encoding='utf-8') as f:
            f.write(sample_text)
        
        self.documents.append({
            'file': '–æ–±—Ä–∞–∑–µ—Ü_–æ–æ–ø—Ç.txt',
            'text': sample_text,
            'size': len(sample_text)
        })
        logger.info("üìù –°–æ–∑–¥–∞–Ω –æ–±—Ä–∞–∑–µ—Ü –¥–æ–∫—É–º–µ–Ω—Ç–∞")
    
    def search_documents(self, query):
        """–ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º"""
        if not self.loaded or not self.documents:
            return []
        
        query_lower = query.lower()
        results = []
        
        for doc in self.documents:
            text_lower = doc['text'].lower()
            
            # –°—á–∏—Ç–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–≤–ø–∞–¥–∞—é—â–∏—Ö —Å–ª–æ–≤
            query_words = [word for word in query_lower.split() if len(word) > 2]
            matches = sum(1 for word in query_words if word in text_lower)
            
            if matches > 0:
                # –ù–∞—Ö–æ–¥–∏–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç —Å —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º
                for word in query_words:
                    if word in text_lower:
                        index = text_lower.find(word)
                        start = max(0, index - 50)
                        end = min(len(doc['text']), index + 150)
                        snippet = doc['text'][start:end]
                        
                        results.append({
                            'file': doc['file'],
                            'text': doc['text'],
                            'snippet': snippet,
                            'score': matches,
                            'matched_word': word
                        })
                        break
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        results.sort(key=lambda x: x['score'], reverse=True)
        return results[:2]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø-2 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    
    def ask_deepseek(self, query, context):
        """–ó–∞–ø—Ä–æ—Å –∫ DeepSeek API"""
        if not DEEPSEEK_API_KEY:
            return "‚ùå API –∫–ª—é—á DeepSeek –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ DEEPSEEK_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è."
        
        prompt = f"""–ù–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –û–û–ü–¢ (–û—Å–æ–±–æ –û—Ö—Ä–∞–Ω—è–µ–º—ã—Ö –ü—Ä–∏—Ä–æ–¥–Ω—ã—Ö –¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è—Ö) –í–æ–ª–æ–≥–æ–¥—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å.

–ò–ù–§–û–†–ú–ê–¶–ò–Ø –ò–ó –î–û–ö–£–ú–ï–ù–¢–û–í:
{context}

–í–û–ü–†–û–°: {query}

–û—Ç–≤–µ—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —Å–∫–∞–∂–∏: "–í –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö –Ω–µ—Ç –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —ç—Ç–æ–º—É –≤–æ–ø—Ä–æ—Å—É."

–û–¢–í–ï–¢:"""

        try:
            headers = {
                "Authorization": f"Bearer {DEEPSEEK_API_KEY}",
                "Content-Type": "application/json"
            }
            
            data = {
                "model": "deepseek-chat",
                "messages": [
                    {
                        "role": "system", 
                        "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –û–û–ü–¢ –í–æ–ª–æ–≥–æ–¥—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏. –û—Ç–≤–µ—á–∞–π —Ç–æ—á–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."
                    },
                    {
                        "role": "user", 
                        "content": prompt
                    }
                ],
                "max_tokens": 800,
                "temperature": 0.3
            }
            
            response = requests.post(
                "https://api.deepseek.com/chat/completions",
                headers=headers,
                json=data,
                timeout=30
            )
            
            if response.status_code == 200:
                result = response.json()
                return result['choices'][0]['message']['content']
            else:
                error_msg = f"–û—à–∏–±–∫–∞ API ({response.status_code})"
                logger.error(f"DeepSeek API error: {response.text}")
                return f"‚ùå {error_msg}"
                
        except Exception as e:
            logger.error(f"DeepSeek request exception: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–æ–∏—Å–∫–∞
doc_search = SimpleDocumentSearch()

def initialize_documents():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    logger.info("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
    doc_search.load_documents()
    logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(doc_search.documents)}")

# –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
threading.Thread(target=initialize_documents, daemon=True).start()

@bot.message_handler(commands=['start'])
def send_welcome(message):
    status = "‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ" if doc_search.loaded else "üîÑ –ó–∞–≥—Ä—É–∑–∫–∞..."
    doc_count = len(doc_search.documents)
    
    welcome_text = f"""ü§ñ –ë–æ—Ç –û–û–ü–¢ –í–æ–ª–æ–≥–æ–¥—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏

üìö –ü–æ–∏—Å–∫ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º –æ–± –û—Å–æ–±–æ –û—Ö—Ä–∞–Ω—è–µ–º—ã—Ö –ü—Ä–∏—Ä–æ–¥–Ω—ã—Ö –¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è—Ö
{status} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {doc_count}

üí° **–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:**
‚Ä¢ "–û–û–ü–¢ –í—ã—Ç–µ–≥–æ—Ä—Å–∫–æ–≥–æ —Ä–∞–π–æ–Ω–∞"
‚Ä¢ "–ó–∞–∫–∞–∑–Ω–∏–∫ –ú–æ–¥–Ω–æ"
‚Ä¢ "–ü–∞–º—è—Ç–Ω–∏–∫–∏ –ø—Ä–∏—Ä–æ–¥—ã"
‚Ä¢ "–°–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –û–û–ü–¢"

üîç –ë–æ—Ç –∏—â–µ—Ç –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç—ã —Å –ø–æ–º–æ—â—å—é DeepSeek AI.

üìä –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: /status
üÜò –ü–æ–º–æ—â—å: /help"""
    
    bot.reply_to(message, welcome_text)

@bot.message_handler(commands=['status'])
def send_status(message):
    doc_count = len(doc_search.documents)
    status_info = f"""üìä **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:**

‚Ä¢ Python –≤–µ—Ä—Å–∏—è: 3.13.4
‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {'‚úÖ –î–∞' if doc_search.loaded else 'üîÑ –ù–µ—Ç'}
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {doc_count}
‚Ä¢ DeepSeek API: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if DEEPSEEK_API_KEY else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}

üí° **–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!** –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –æ–± –û–û–ü–¢."""
    
    bot.reply_to(message, status_info)

@bot.message_handler(commands=['help'])
def send_help(message):
    help_text = """üÜò **–ü–æ–º–æ—â—å:**

**–ö–æ–º–∞–Ω–¥—ã:**
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã  
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

**–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å:**
1. –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º
2. –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –û–û–ü–¢
3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞

**–ü—Ä–∏–º–µ—Ä—ã:**
"–ö–∞–∫–∏–µ –û–û–ü–¢ –≤ –í—ã—Ç–µ–≥–æ—Ä—Å–∫–æ–º —Ä–∞–π–æ–Ω–µ?"
"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –®–∏–º–æ–∑–µ—Ä—Å–∫–æ–º –∑–∞–∫–∞–∑–Ω–∏–∫–µ"
"–°–ø–∏—Å–æ–∫ –ø–∞–º—è—Ç–Ω–∏–∫–æ–≤ –ø—Ä–∏—Ä–æ–¥—ã –í–æ–ª–æ–≥–æ–¥—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏"

üìö –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ –≤ –ø–∞–ø–∫–µ 'documents'"""
    
    bot.reply_to(message, help_text)

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    bot.send_chat_action(message.chat.id, 'typing')
    
    if not doc_search.loaded:
        bot.reply_to(message, "üîÑ –î–æ–∫—É–º–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥.")
        return
    
    user_query = message.text.strip()
    
    if len(user_query) < 2:
        bot.reply_to(message, "‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å.")
        return
    
    # –ò—â–µ–º –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö
    search_results = doc_search.search_documents(user_query)
    
    if search_results:
        # –°–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context = "\n\n".join([
            f"–î–æ–∫—É–º–µ–Ω—Ç: {result['file']}\n–§—Ä–∞–≥–º–µ–Ω—Ç: {result['snippet']}..." 
            for result in search_results
        ])
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        answer = doc_search.ask_deepseek(user_query, context)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        sources = ", ".join(set(result['file'] for result in search_results))
        full_answer = f"{answer}\n\nüìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {sources}"
        
    else:
        full_answer = f"""‚ùå –ü–æ –∑–∞–ø—Ä–æ—Å—É "{user_query}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.

üí° **–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:**
‚Ä¢ –î—Ä—É–≥–∏–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏
‚Ä¢ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –û–û–ü–¢
‚Ä¢ –†–∞–π–æ–Ω—ã –í–æ–ª–æ–≥–æ–¥—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏

üìã –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."""
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    try:
        bot.reply_to(message, full_answer)
    except Exception as e:
        logger.error(f"Error sending message: {e}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞.")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –Ω–∞ Python 3.13.4...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    bot_thread = threading.Thread(target=bot.infinity_polling, daemon=True)
    bot_thread.start()
    
    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
    serve(app, host='0.0.0.0', port=8000)

if __name__ == '__main__':
    main()