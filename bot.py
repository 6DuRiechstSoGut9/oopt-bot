import os
import logging
import threading
import telebot
from flask import Flask
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)
PORT = int(os.environ.get('PORT', 8000))

@app.route('/')
def home():
    return "ü§ñ –ë–æ—Ç –û–û–ü–¢ —Ä–∞–±–æ—Ç–∞–µ—Ç!"

TOKEN = os.getenv('TELEGRAM_TOKEN')
bot = telebot.TeleBot(TOKEN)

# –ü—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –ø–∞–º—è—Ç–∏
documents = {
    "–í–µ—Ä—Ö–æ–≤–∏–Ω—Å–∫–∏–π –ª–µ—Å": "–û—Å–æ–±–æ –æ—Ö—Ä–∞–Ω—è–µ–º–∞—è –ø—Ä–∏—Ä–æ–¥–Ω–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è. –ü—Ç–∏—Ü—ã: –∑—è–±–ª–∏–∫, –ø–µ–Ω–æ—á–∫–∞-—Ç–µ–Ω—å–∫–æ–≤–∫–∞, –≥–ª—É—Ö–∞—Ä—å, —Ä—è–±—á–∏–∫, —è—Å—Ç—Ä–µ–±-–ø–µ—Ä–µ–ø–µ–ª—è—Ç–Ω–∏–∫, –±–æ–ª—å—à–æ–π –ø–µ—Å—Ç—Ä—ã–π –¥—è—Ç–µ–ª.",
    "–®–∏–º–æ–∑–µ—Ä—Å–∫–∏–π –∑–∞–∫–∞–∑–Ω–∏–∫": "–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω –≤ –í—ã—Ç–µ–≥–æ—Ä—Å–∫–æ–º —Ä–∞–π–æ–Ω–µ. –ü–ª–æ—â–∞–¥—å: 45 000 –≥–∞. –û–±–∏—Ç–∞—é—Ç –º–µ–¥–≤–µ–¥–∏, –ª–æ—Å–∏, —Ä—ã—Å–∏, –±–æ–±—Ä—ã.",
    "–†—É—Å—Å–∫–∏–π –°–µ–≤–µ—Ä": "–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ä–∫. –°–æ–∑–¥–∞–Ω –≤ 1992 –≥–æ–¥—É. –ü–ª–æ—â–∞–¥—å: 166 400 –≥–∞."
}

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    welcome_text = """ü§ñ –ë–æ—Ç –û–û–ü–¢ –í–æ–ª–æ–≥–æ–¥—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/status - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
/list - —Å–ø–∏—Å–æ–∫ –û–û–ü–¢

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –û–û–ü–¢ –∏ –ø–æ–ª—É—á–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!"""
    
    bot.reply_to(message, welcome_text)

@bot.message_handler(commands=['status'])
def send_status(message):
    bot.reply_to(message, "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∏—Å–ø—Ä–∞–≤–Ω–æ")

@bot.message_handler(commands=['list'])
def send_list(message):
    oopt_list = "\n".join([f"‚Ä¢ {name}" for name in documents.keys()])
    bot.reply_to(message, f"üìã –°–ø–∏—Å–æ–∫ –û–û–ü–¢:\n\n{oopt_list}")

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_query = message.text.strip().lower()
    
    # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    found_results = []
    for name, info in documents.items():
        if user_query in name.lower() or any(word in info.lower() for word in user_query.split()):
            found_results.append((name, info))
    
    if found_results:
        response = "üìÑ –ù–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n\n"
        for name, info in found_results:
            response += f"**{name}**\n{info}\n\n"
        bot.reply_to(message, response)
    else:
        bot.reply_to(message, "‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /list –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –û–û–ü–¢")

def run_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    try:
        bot.infinity_polling()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}")

def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    bot_thread = threading.Thread(target=run_bot, daemon=True)
    bot_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    from waitress import serve
    serve(app, host='0.0.0.0', port=PORT)

if __name__ == '__main__':
    main()
