# bot.py
import os
import logging
import json
from pathlib import Path
from typing import List

from RAG import rag_answer, build_index

from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    filters,
)

# ---------- CONFIG ----------
TOKEN = input("TOKEN:") #os.environ.get("TELEGRAM_BOT_TOKEN")
if not TOKEN:
    raise RuntimeError("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏")

INDEX_PATH = "faiss.index"
META_PATH = "chunks_meta.json"
DOCS_DIR = "documents/"
#MODEL_NAME = "sentence-transformers/all-MiniLM-L6-v2"
TOP_K = 5

# ----------------------------
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def read_txt_file(path: Path) -> str:
    """–ß—Ç–µ–Ω–∏–µ txt —Ñ–∞–π–ª–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∞–º–∏"""
    for encoding in ['utf-8', 'cp1251', 'windows-1251', 'latin-1']:
        try:
            with open(path, "r", encoding=encoding) as f:
                content = f.read().strip()
                if content and len(content) > 10:
                    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω {path.name} –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ {encoding}")
                    return content
        except Exception as e:
            continue
    
    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å {path.name} –Ω–∏ –≤ –æ–¥–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–µ")
    return ""


class BotApp:
    def __init__(self):
        self.index = None
        self.is_ready = False
        self.init_bot()

    def init_bot(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏–µ–π"""
        try:
            logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞...")

            if not os.path.exists(INDEX_PATH) or not os.path.exists(META_PATH):
                print("–°—Ç—Ä–æ–∏–º –∏–Ω–¥–µ–∫—Å –∏–∑ –ø–∞–ø–∫–∏:", DOCS_DIR)
                build_index(DOCS_DIR, index_path=INDEX_PATH, meta_path=META_PATH)
            else:
                print("–ò–Ω–¥–µ–∫—Å –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä–∫—É.")

            self.is_ready = True
            logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            self.is_ready = False

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self.is_ready:
            await update.message.reply_text("üîÑ –ë–æ—ÇËøòÂú®ÂàùÂßãÂåñÔºåËØ∑Á®çÂÄô...")
            return
            
        await update.message.reply_text(
            "ü§ñ *–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!*\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Ñ—Ä–∞–∑—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º.\n"
            "–Ø –Ω–∞–π–¥—É –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã —Ç–µ–∫—Å—Ç–∞.\n\n"
            "_–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π_",
            parse_mode='Markdown'
        )

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self.is_ready:
            await update.message.reply_text("‚è≥ –ë–æ—ÇËøòÂú® –∑–∞–≥—Ä—É–∑–∫–∏ÔºåËØ∑Á®çÁ≠â...")
            return
            
        query = update.message.text.strip()
        if not query:
            await update.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞")
            return
            
        try:
            logger.info(f"üîç –ü–æ–∏—Å–∫ –∑–∞–ø—Ä–æ—Å–∞: {query}")
            results = rag_answer(query, index_path = INDEX_PATH, meta_path= META_PATH, top_k = TOP_K)
            
            if not results:
                await update.message.reply_text(
                    "‚ùå –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤."
                )
                return
                
            response = "üìÑ *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:*\n\n"
            for i, r in enumerate(results, 1):
                m = r["meta"]
                score = r.get("score", 0.0)
                rerank = r.get("rerank_score", 0.0)
                if ( rerank//100>score ):
                    score=rerank if rerank!=999 else 1
                response += f"*{i}.* –°—Ö–æ–¥—Å—Ç–≤–æ: `{score:.3f}`\n"
                response += f"{r['text']}\n\n"
                
            # –û–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if len(response) > 4000:
                response = response[:4000] + "\n\n... (—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ)"
                
            await update.message.reply_text(response, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
            await update.message.reply_text(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start"
            )


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("üéØ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    
    try:
        bot_app = BotApp()
        application = ApplicationBuilder().token(TOKEN).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", bot_app.start))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot_app.handle_message))
        
        logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling")
        application.run_polling()
        
    except Exception as e:
        logger.critical(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise


if __name__ == "__main__":
    main()
